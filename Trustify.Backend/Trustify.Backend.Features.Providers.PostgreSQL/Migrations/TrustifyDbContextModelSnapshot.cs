// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Trustify.Backend.FeaturesCore.Database.Entities;

#nullable disable

namespace Trustify.Backend.Features.Providers.PostgreSQL.Migrations
{
    [DbContext(typeof(TrustifyDbContext))]
    partial class TrustifyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ImageContentSection", b =>
                {
                    b.Property<long>("ImageContentsImageContentId")
                        .HasColumnType("bigint");

                    b.Property<long>("SectionsSectionId")
                        .HasColumnType("bigint");

                    b.HasKey("ImageContentsImageContentId", "SectionsSectionId");

                    b.HasIndex("SectionsSectionId");

                    b.ToTable("ImageContentSection");
                });

            modelBuilder.Entity("RoleSection", b =>
                {
                    b.Property<string>("RolesId")
                        .HasColumnType("text");

                    b.Property<long>("SectionsSectionId")
                        .HasColumnType("bigint");

                    b.HasKey("RolesId", "SectionsSectionId");

                    b.HasIndex("SectionsSectionId");

                    b.ToTable("RoleSection");
                });

            modelBuilder.Entity("SectionTextualContent", b =>
                {
                    b.Property<long>("SectionsSectionId")
                        .HasColumnType("bigint");

                    b.Property<long>("TextualContentsTextualContentId")
                        .HasColumnType("bigint");

                    b.HasKey("SectionsSectionId", "TextualContentsTextualContentId");

                    b.HasIndex("TextualContentsTextualContentId");

                    b.ToTable("SectionTextualContent");
                });

            modelBuilder.Entity("Trustify.Backend.FeaturesCore.Database.Entities.ImageContent", b =>
                {
                    b.Property<long>("ImageContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ImageContentId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Size")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UploadedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ImageContentId");

                    b.ToTable("ImageContents");
                });

            modelBuilder.Entity("Trustify.Backend.FeaturesCore.Database.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Trustify.Backend.FeaturesCore.Database.Entities.Section", b =>
                {
                    b.Property<long>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SectionId"));

                    b.Property<string>("Description")
                        .HasMaxLength(1023)
                        .HasColumnType("character varying(1023)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("SectionId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Trustify.Backend.FeaturesCore.Database.Entities.TextualContent", b =>
                {
                    b.Property<long>("TextualContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("TextualContentId"));

                    b.Property<string>("Author")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Lenght")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2047)
                        .HasColumnType("character varying(2047)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("TextualContentId");

                    b.ToTable("TextualContents");
                });

            modelBuilder.Entity("ImageContentSection", b =>
                {
                    b.HasOne("Trustify.Backend.FeaturesCore.Database.Entities.ImageContent", null)
                        .WithMany()
                        .HasForeignKey("ImageContentsImageContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trustify.Backend.FeaturesCore.Database.Entities.Section", null)
                        .WithMany()
                        .HasForeignKey("SectionsSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleSection", b =>
                {
                    b.HasOne("Trustify.Backend.FeaturesCore.Database.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trustify.Backend.FeaturesCore.Database.Entities.Section", null)
                        .WithMany()
                        .HasForeignKey("SectionsSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SectionTextualContent", b =>
                {
                    b.HasOne("Trustify.Backend.FeaturesCore.Database.Entities.Section", null)
                        .WithMany()
                        .HasForeignKey("SectionsSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trustify.Backend.FeaturesCore.Database.Entities.TextualContent", null)
                        .WithMany()
                        .HasForeignKey("TextualContentsTextualContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
